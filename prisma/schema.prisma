// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String?  @default("")
  teacher   Teacher?
  student   Student?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id            String    @id @default(uuid())
  name          String?
  address       String?
  mobile_number String?
  department    String?
  project       Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?   @unique
}

model Student {
  id            String          @id @default(uuid())
  name          String?
  address       String?
  fatherName    String?
  semester      String?
  mobile_number String?
  department    String?
  doc           Doc[]
  assignProject AssignProject[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User?           @relation(fields: [userId], references: [id])
  userId        String?         @unique
}

model Doc {
  id      String  @id @default(uuid())
  docName String?
  path    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@unique([projectId, studentId])
}

model Project {
  id            String          @id @default(uuid())
  name          String?
  semester      String?
  subject       String?
  assignProject AssignProject[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  teacher       Teacher?        @relation(fields: [teacherId], references: [id])
  teacherId     String?
  doc           Doc[]
}

model AssignProject {
  id        String   @id @default(uuid())
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  student    Student? @relation(fields: [studentId], references: [id])
  studentId  String?
  assignedAt DateTime @default(now())
  assignedBy String

  @@unique([projectId, studentId])
}
